services:

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    ports:
      - "${PG_PORT}:5432"  # Map container's default PostgreSQL port to host
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck: # make sure this is up before starting the api
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
    ports:
      - "${FLASK_PORT}:5000"  # Map Flask's default port to host
    depends_on:
      db:
        condition: service_healthy  # Wait for the db service to be healthy
    environment:
      FLASK_APP: ${FLASK_APP}
      FLASK_DEBUG: ${FLASK_DEBUG}
      FLASK_PORT: ${FLASK_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB: ${PG_DB}
      PG_PORT: ${PG_PORT}
    volumes:
      - .:/app
    command: >
      sh -c "
      flask db upgrade &&
      flask run --host=0.0.0.0 --port=5000
      "
    env_file:
      - .env

  frontend:
    build:
      context: ./ui
      args:
        NODE_ENV: development  # or production
    environment:
      - NODE_ENV=development  # passed into container
    ports:
      - "3000:3000"
    volumes:
      - ./ui:/app
    command: >
      sh -c "
      yarn install &&
      yarn start
      "
    env_file:
      - .env

volumes:
  postgres-data:
